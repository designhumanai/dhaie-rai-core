{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://designhumanai.com/schemas/service-manifest/v1.1/schema.json",
  "$comment": "SPDX-License-Identifier: Apache-2.0",
  "title": "DHAIE RAI Service Manifest Schema",
  "description": "Semantic self-description schema for Reflexive AI systems enabling services to declare their business purpose, ethical constraints, and semantic dependencies. Copyright Â© Viktor Savitskiy, 1995-2025. Licensed under Apache License 2.0. Part of the DHAIE Project (Design Human AI Engineering & Enhancement). Repository: https://github.com/designhumanai/dhaie-rai-core",
  "type": "object",
  "required": [
    "@context",
    "@type",
    "@id",
    "name",
    "version",
    "dhaie:manifestVersion",
    "description",
    "dhaie:businessPurpose",
    "dhaie:domainContext",
    "provider",
    "dhaie:ethicalConstraints"
  ],
  "properties": {
    "$comment": {
      "type": ["string", "array"],
      "items": {
        "type": "string"
      },
      "description": "Optional metadata comments for documentation, license headers, and educational purposes. Ignored by validators but valuable for human readers."
    },
    "@context": {
      "type": "object",
      "description": "JSON-LD context defining vocabularies",
      "$comment": "Establishes semantic namespaces. @vocab defaults to schema.org for common properties, dhaie namespace for DHAIE-specific concepts.",
      "required": ["@vocab", "dhaie"],
      "properties": {
        "@vocab": {
          "type": "string",
          "const": "https://schema.org/",
          "description": "Default vocabulary (schema.org)"
        },
        "dhaie": {
          "type": "string",
          "const": "https://designhumanai.com/ontology/v1#",
          "description": "DHAIE-specific namespace"
        }
      },
      "additionalProperties": false
    },
    "@type": {
      "type": "string",
      "const": "dhaie:ReflexiveServiceManifest",
      "description": "RDF type declaration",
      "$comment": "Marks this as a DHAIE Reflexive Service Manifest for semantic web compatibility"
    },
    "@id": {
      "type": "string",
      "format": "uri",
      "pattern": "^https://",
      "description": "Globally unique, persistent URI for this manifest",
      "$comment": "Should be dereferenceable and stable across service lifecycle. Use versioned paths for schema evolution (e.g., /v2/manifest)."
    },
    "name": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9][ a-zA-Z0-9-]{0,98}[a-zA-Z0-9]$",
      "minLength": 3,
      "maxLength": 100,
      "description": "Human-readable service name",
      "$comment": "Use business-friendly names, not technical identifiers. Example: 'Cross-Border Payment Engine' not 'payment-svc-v2'"
    },
    "version": {
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
      "description": "Semantic version of the service implementation",
      "$comment": "Follows SemVer 2.0.0. This is the service version, not the manifest schema version."
    },
    "dhaie:manifestVersion": {
      "type": "string",
      "const": "1.1",
      "description": "Version of DHAIE manifest schema",
      "$comment": "Current schema version. Validators MUST accept manifests with same MAJOR version (1.x)."
    },
    "description": {
      "type": "string",
      "minLength": 10,
      "maxLength": 500,
      "description": "Technical summary of what the service does",
      "$comment": "Describe functional capabilities. Complements businessPurpose which describes the 'why'. Keep 1-3 sentences."
    },
    "dhaie:businessPurpose": {
      "type": "string",
      "minLength": 20,
      "maxLength": 700,
      "description": "Why this service exists - the business value it provides",
      "$comment": "CRITICAL FIELD for reflexivity. Answer: 'What problem does this solve?' and 'Why would a business pay for this?' Focus on human value, not technical implementation."
    },
    "dhaie:domainContext": {
      "type": "string",
      "pattern": "^[a-zA-Z][a-zA-Z0-9]*(?:\\.[a-zA-Z][a-zA-Z0-9]*){2,}$",
      "description": "Dot-separated path in business architecture (min 3 levels)",
      "$comment": "Locates service in organizational taxonomy. Format: Domain.Subdomain.Capability (e.g., FinTech.Payments.International). Define controlled vocabulary within your org."
    },
    "provider": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 200,
          "description": "Name of the providing organization"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "Provider's homepage or info page"
        }
      },
      "additionalProperties": false
    },
    "dhaie:operations": {
      "type": "array",
      "$comment": "Declare primary service capabilities with semantic metadata about state changes, PII handling, and audit requirements. Use category to group related operations.",
      "items": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "$comment": {
            "type": "string",
            "description": "Optional educational comment for this operation"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-zA-Z0-9]{2,49}$",
            "description": "Unique operation identifier (camelCase)",
            "$comment": "Use verb-based names: initiateTransfer, scoreRisk, viewRecords"
          },
          "description": {
            "type": "string",
            "minLength": 10,
            "maxLength": 300,
            "description": "Human-readable operation explanation"
          },
          "category": {
            "type": "string",
            "enum": [
              "financial",
              "dataQuery",
              "dataMutation",
              "admin",
              "compute",
              "orchestration",
              "notification",
              "authentication"
            ],
            "description": "High-level operation grouping",
            "$comment": "Categories help with architectural understanding. 'compute' for stateless processing, 'orchestration' for multi-service coordination."
          },
          "mutates": {
            "type": "boolean",
            "description": "Whether operation changes system state",
            "$comment": "True for CREATE/UPDATE/DELETE operations, false for READ-only queries. Critical for understanding side effects."
          },
          "piiFields": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
            },
            "uniqueItems": true,
            "description": "PII field names involved in operation",
            "$comment": "List field names that contain Personally Identifiable Information. Triggers consentMechanism requirement at manifest level."
          },
          "auditRequired": {
            "type": "boolean",
            "description": "Whether operation requires audit logging",
            "$comment": "True for compliance-critical operations (financial transactions, PHI access, admin actions)"
          }
        },
        "additionalProperties": false
      },
      "uniqueItems": true,
      "description": "Primary operations exposed by the service"
    },
    "dhaie:ethicalConstraints": {
      "type": "array",
      "minItems": 1,
      "$comment": "REQUIRED FIELD. Every service must declare at least one ethical/regulatory constraint. This is foundational to DHAIE's ethical-by-design philosophy.",
      "items": {
        "type": "object",
        "required": ["regulation", "implementation"],
        "properties": {
          "regulation": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "Common name of regulation or standard",
            "$comment": "Use widely recognized names: GDPR, HIPAA, SOC 2, ISO 27001, Algorithmic Fairness"
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Link to official regulatory text",
            "$comment": "Strongly recommended. Links to authoritative sources enable auditors to verify compliance claims."
          },
          "articles": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[A-Z][a-zA-Z]+ \\d+.*$"
            },
            "uniqueItems": true,
            "description": "Specific articles/sections referenced",
            "$comment": "Format: 'Article 6(1)(a)', '45 CFR 164.502', 'Section 1234'. Omit if not applicable."
          },
          "implementation": {
            "type": "string",
            "minLength": 10,
            "maxLength": 500,
            "description": "How the service implements this constraint",
            "$comment": "Be specific about technical controls and procedures. This is auditable documentation."
          },
          "verificationMethod": {
            "type": "object",
            "required": ["type"],
            "$comment": "Machine-actionable compliance verification. Include tools and last verification date for audit trails.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "automated_scan",
                  "manual_audit",
                  "third_party_certification",
                  "continuous_monitoring"
                ],
                "$comment": "automated_scan: CI/CD integrated (e.g., policy-as-code), manual_audit: periodic reviews, third_party_certification: external auditor, continuous_monitoring: real-time compliance checking"
              },
              "tool": {
                "type": "string",
                "maxLength": 100,
                "description": "Name of verification tool or certification body"
              },
              "policyUri": {
                "type": "string",
                "format": "uri",
                "description": "Link to machine-readable policy definition (e.g., OPA rego file)"
              },
              "lastVerified": {
                "type": "string",
                "format": "date",
                "description": "ISO 8601 date of last verification (YYYY-MM-DD)"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "description": "Ethical, legal, and regulatory constraints"
    },
    "dhaie:consentMechanism": {
      "type": "string",
      "enum": [
        "explicit_consent_required",
        "implied_consent",
        "no_pii_processed",
        "consent_managed_externally"
      ],
      "description": "How user consent is obtained for data processing",
      "$comment": "REQUIRED if: (1) any operation has piiFields, OR (2) any dependency has consentImplications. Use 'no_pii_processed' ONLY if truly no PII is handled. 'explicit_consent_required' is default for GDPR/CCPA compliance."
    },
    "dhaie:socialImpact": {
      "type": "object",
      "required": ["description"],
      "$comment": "Optional but encouraged. Quantify positive societal contribution using standardized metrics. Critical for DHAIE's cognitive equity principles.",
      "properties": {
        "metrics": {
          "type": "array",
          "$comment": "Use standardized metric names from DHAIE taxonomy. Each metric must be an object with name, value, and optional baseline/unit/measurementMethod.",
          "items": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "financial_inclusion_index",
                  "cross_border_cost_reduction",
                  "carbon_footprint_reduction",
                  "accessibility_improvement",
                  "cognitive_equity_score",
                  "digital_divide_reduction",
                  "healthcare_access_improvement",
                  "education_accessibility"
                ],
                "description": "Standardized social impact metric name",
                "$comment": "financial_inclusion_index: 0-1 scale measuring access to financial services. cross_border_cost_reduction: percentage savings vs baseline. accessibility_improvement: WCAG compliance or similar. cognitive_equity_score: fairness metric across demographic groups."
              },
              "value": {
                "type": "number",
                "description": "Metric value (interpretation depends on metric)"
              },
              "baseline": {
                "type": "number",
                "description": "Baseline value for comparison",
                "$comment": "What was the metric before this service? Essential for measuring improvement."
              },
              "unit": {
                "type": "string",
                "maxLength": 50,
                "description": "Unit of measurement",
                "$comment": "Examples: 'percentage', 'index (0-1)', 'USD saved', 'users served'"
              },
              "measurementMethod": {
                "type": "string",
                "maxLength": 200,
                "description": "How this metric is measured",
                "$comment": "Cite methodology: 'World Bank Financial Inclusion Index', 'WCAG 2.1 AA compliance score', 'Gini coefficient calculation'"
              }
            },
            "additionalProperties": false
          },
          "uniqueItems": true
        },
        "description": {
          "type": "string",
          "minLength": 20,
          "maxLength": 700,
          "description": "Narrative description of social impact",
          "$comment": "Tell the human story. Who benefits? How does this reduce inequality or improve lives? Complement quantitative metrics with qualitative context."
        }
      },
      "additionalProperties": false,
      "description": "Social impact metrics and description"
    },
    "dhaie:semanticDependencies": {
      "type": "array",
      "$comment": "Declare service dependencies with business context and consent implications. Use DHAIE Relationship Taxonomy for 'relationship' field. This is semantic architecture, not just technical integration.",
      "items": {
        "type": "object",
        "required": ["target", "relationship", "businessReason"],
        "properties": {
          "$comment": {
            "type": "string",
            "description": "Optional educational comment for this dependency"
          },
          "target": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "Name of the dependent-upon service",
            "$comment": "Use the service's 'name' field value, not technical hostname or service ID"
          },
          "targetUri": {
            "type": "string",
            "format": "uri",
            "pattern": "^https://",
            "description": "URI of target service's manifest",
            "$comment": "Should point to target's @id field for explicit semantic linking. Strongly recommended for knowledge graph construction."
          },
          "relationship": {
            "type": "string",
            "enum": [
              "data.provider.primary",
              "data.provider.cache",
              "data.provider.realtime",
              "data.consumer.analytics",
              "data.consumer.backup",
              "data.consumer.export",
              "risk.assessment.required",
              "risk.assessment.optional",
              "compliance.verification.mandatory",
              "compliance.verification.optional",
              "orchestration.trigger",
              "orchestration.coordinate",
              "computation.specialized",
              "computation.offload",
              "notification.trigger",
              "notification.subscribe",
              "auth.delegation",
              "auth.verification",
              "ledger.append_only",
              "ledger.query"
            ],
            "description": "Nature of dependency from DHAIE taxonomy",
            "$comment": "DHAIE Relationship Taxonomy categorizes dependencies by business purpose, not technical implementation. data.provider.* = source of data, risk.assessment.* = risk/fraud checking, orchestration.* = workflow coordination, ledger.* = audit trail, auth.* = authentication/authorization. See manifest-schema.md for complete taxonomy reference."
          },
          "businessReason": {
            "type": "string",
            "minLength": 10,
            "maxLength": 500,
            "description": "Why this dependency exists",
            "$comment": "CRITICAL: Explain the business/regulatory/operational need, not just 'we call this API'. Example: 'AML regulation requires risk scoring for transactions >$10k' not 'calls fraud detection service'."
          },
          "consentImplications": {
            "type": "string",
            "minLength": 10,
            "maxLength": 300,
            "description": "What data is shared and consent implications",
            "$comment": "Be explicit about data sharing. If present, parent service MUST declare consentMechanism. State 'No PII shared' when applicable."
          },
          "condition": {
            "type": "object",
            "required": ["when", "enforcementLevel"],
            "$comment": "Conditional dependencies model business rules. Use pseudo-code or natural language for 'when'. Do NOT add $comment inside condition object (violates additionalProperties).",
            "properties": {
              "when": {
                "type": "string",
                "maxLength": 200,
                "description": "Condition expression (pseudo-code or natural language)",
                "$comment": "Examples: 'transaction.amount.usd > 10000', 'user.tier == premium', 'risk_score > 80 OR manual_review_requested'"
              },
              "enforcementLevel": {
                "type": "string",
                "enum": ["mandatory", "recommended", "optional"],
                "$comment": "mandatory: always enforced (hard requirement), recommended: best practice but skippable, optional: optimization/enhancement only"
              }
            },
            "additionalProperties": false,
            "description": "Conditional dependency activation"
          }
        },
        "additionalProperties": false
      },
      "uniqueItems": true,
      "description": "Semantic relationships with other services"
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "dhaie:operations": {
            "contains": {
              "properties": {
                "piiFields": {
                  "minItems": 1
                }
              }
            }
          }
        }
      },
      "then": {
        "required": ["dhaie:consentMechanism"],
        "properties": {
          "dhaie:consentMechanism": {
            "not": {
              "const": "no_pii_processed"
            }
          }
        }
      },
      "$comment": "Validation rule: If ANY operation has piiFields, then consentMechanism is REQUIRED and cannot be 'no_pii_processed'"
    },
    {
      "if": {
        "properties": {
          "dhaie:semanticDependencies": {
            "contains": {
              "required": ["consentImplications"]
            }
          }
        }
      },
      "then": {
        "required": ["dhaie:consentMechanism"]
      },
      "$comment": "Validation rule: If ANY dependency has consentImplications, then consentMechanism is REQUIRED at manifest level"
    }
  ],
  "additionalProperties": false,
  "$defs": {
    "schemaEvolutionPolicy": {
      "description": "MAJOR (1.x â 2.x): Breaking changes (remove fields, change types). MINOR (1.0 â 1.1): New optional fields, educational improvements. PATCH (1.0.0 â 1.0.1): Documentation only. Validators MUST accept manifests with same MAJOR version.",
      "changelogV1.1": {
        "added": [
          "Support for $comment field at root and within operations/dependencies",
          "Educational $comment annotations on 15+ key properties",
          "Enhanced descriptions for social impact metrics",
          "Improved guidance on relationship taxonomy usage",
          "Examples in $defs based on reference implementations"
        ],
        "unchanged": [
          "All required fields remain the same",
          "All enum values unchanged",
          "All validation rules preserved",
          "Full backward compatibility maintained"
        ]
      }
    },
    "exampleManifests": {
      "description": "Reference implementations demonstrating schema usage",
      "fintech_payment": "examples/payment-service.manifest.json - Cross-border payments with AML/GDPR compliance and conditional fraud detection",
      "ml_fraud_detection": "examples/fraud-detector.manifest.json - ML-powered risk scoring with algorithmic fairness constraints",
      "healthcare_portal": "examples/patient-portal.manifest.json - HIPAA-compliant patient portal with PHI handling and emergency access"
    },
    "relationshipTaxonomyGuide": {
      "description": "Quick reference for choosing correct relationship types",
      "data_flow": {
        "data.provider.primary": "Authoritative source (e.g., CRM â Customer data)",
        "data.provider.cache": "Cached/replicated data (e.g., CDN â Product catalog)",
        "data.provider.realtime": "Streaming data (e.g., Market ticker â Price feed)",
        "data.consumer.analytics": "Analytics destination (e.g., Transactions â BI warehouse)",
        "data.consumer.backup": "Backup storage (e.g., Daily snapshots â Archive)",
        "data.consumer.export": "External export (e.g., Reports â Regulatory filing)"
      },
      "risk_compliance": {
        "risk.assessment.required": "Mandatory risk check (e.g., AML screening)",
        "risk.assessment.optional": "Optional risk scoring (e.g., Credit check for premium)",
        "compliance.verification.mandatory": "Required compliance (e.g., GDPR consent check)",
        "compliance.verification.optional": "Optional enhancement (e.g., Enhanced due diligence)"
      },
      "orchestration": {
        "orchestration.trigger": "Initiates workflow (e.g., Payment â Fulfillment)",
        "orchestration.coordinate": "Saga/choreography (e.g., Inventory reservation)"
      },
      "computation": {
        "computation.specialized": "ML/specialized compute (e.g., Recommendation engine)",
        "computation.offload": "General processing (e.g., PDF generation)"
      },
      "notification": {
        "notification.trigger": "Send notification (e.g., Payment confirmation email)",
        "notification.subscribe": "Receive alerts (e.g., Low inventory alert)"
      },
      "auth": {
        "auth.delegation": "SSO/authentication (e.g., Identity provider)",
        "auth.verification": "Token validation (e.g., JWT verification)"
      },
      "ledger": {
        "ledger.append_only": "Immutable audit log (e.g., Blockchain ledger)",
        "ledger.query": "Historical audit queries (e.g., Compliance database)"
      }
    },
    "license": {
      "code": "Apache-2.0",
      "codeUrl": "https://www.apache.org/licenses/LICENSE-2.0",
      "documentation": "CC-BY-NC-SA-4.0",
      "documentationUrl": "https://creativecommons.org/licenses/by-nc-sa/4.0/"
    },
    "copyright": {
      "holder": "Viktor Savitskiy",
      "years": "1995-2025",
      "project": "DHAIE Project (Design Human AI Engineering & Enhancement)",
      "notice": "This schema is part of the DHAIE RAI Core project. For complete licensing information, see LICENSE and NOTICE files in the repository."
    },
    "contacts": {
      "generalInquiries": "info@designhumanai.com",
      "researchPartnerships": "research@designhumanai.com",
      "commercialLicensing": "dhaie@designhumanai.com",
      "repository": "https://github.com/designhumanai/dhaie-rai-core",
      "discussions": "https://github.com/designhumanai/dhaie-rai-core/discussions",
      "documentation": "https://github.com/designhumanai/dhaie-rai-core/blob/main/docs/manifest-schema.md"
    },
    "attribution": {
      "creator": "Viktor Savitskiy",
      "organization": "DHAIE Project",
      "since": 1995,
      "acknowledgments": "See ACKNOWLEDGMENTS.md for research contributions and citations"
    }
  }
}
